% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ptlines.R
\name{ptdots}
\alias{ptdots}
\title{Draw repeated profile data as dots}
\usage{
ptdots(.dt, .x, .y, .val, ...)
}
\arguments{
\item{.dt}{Data frame containing data to plot. Can be NULL, if all data
vectors are found in the enclosing environment.}

\item{.x}{Value that defines the x (time) coordinate of the plot.  Usually
a date or other time coordinate. Can be either a  vector or the name
of a vector in source data frame, not an expression.}

\item{.y}{Value that defines the (reversed) y coordinate of the plot.
Usually the depth.  Can be either a numeric vector or the name
of a numeric vector in source data frame, not an expression.}

\item{.val}{Value to be symbolized via the color of the dots.  Usually a
measured environmental variable that varies with water depth. Can be
either a numeric vector or the name of a numeric vector in source data
frame, not an expression.}

\item{...}{Further arguments to pass to \code{geom_point()}.  Likely to include
additional aesthetic specifications.  To pass additional aesthetic
mappings, use \code{mapping = aes()} referring to names from the enclosing
environment (not a data column name).}
}
\value{
A \code{ggplot} object (S3 class defined by \code{ggplot2})
}
\description{
Build a "depth down" \code{ggplot} point graphic for repeated depth
profile data.
}
\details{
Create a graphic that draws vertical profile data across multiple dates or
times. Depth is drawn reversed so that zero is at
the top and depth increases downward.  Values are drawn as dots on an x
(usually date or time) by y (usually depth, reversed) layout.  By default,
dots are symbolized by color to depict measured values.

The function's first parameter is a data frame, and it produces a \code{ggplot}
plot object, so can be integrated into \code{ggplot2} and\code{tidyverse} work flows.

Default colors from \code{ggplot2} are seldom optimal.  Users will usually want to
adjust colors using \code{scale_color_viridis_c()}, \code{scale_color_distiller()}, or
\code{scale_color_continuous()}.

Passing the name of a vector in the data frame into a supplementary
\code{mapping = aes()} call does yet not work.  Any supplementary aesthetics
defined in \code{mapping = aes()} must refer to names from the enclosing
environment, either via an explicit reference to the data frame, or
by referring to a vector defined in the enclosing environment.

As a result, this function does not yet work well with filled point symbols.
(R point shapes 21 through 25).  That takes several additional steps:
\enumerate{
\item Add \verb{mapping = aes(fill = ?)} to the function call, pointing explicitly
to the data in the enclosing environment.
\item Pass a \code{shape} argument selecting the filled symbol shape
\item Usually, pass a \code{color} argument to define the fixed dot outline color.
(\code{color = 'gray50'} is often a good starting point).  If you don't,
\code{ggplot2} will vary the outline color according to the value of \code{.val},
which is probably not what you want.
\item Usually, you will want to supplement the call to this function with a
cal lto \code{scale_fill_viridis_c()}, \code{scale_fill_distiller()}, or
\code{scale_fill_continuous()} to define the fill color scale.
}
}
\examples{
# Dummy data
df <- tibble::tibble(depth = rep(1:10,3),
                month = factor(rep(c(6,7,8),each = 10),
                                 labels = c('Jun', 'Jul', 'Aug')),
                val = (depth+50)/5 - 5 + rnorm(30, 0, 0.25))
# Normal use
ptdots(df, month, depth, val) +
  theme_minimal()

# Filled Symbols
ptdots(dep_sonde, month, depth, do, size = 5,
      shape = 21, color = 'gray25',
     mapping = aes(fill = dep_sonde$do)) +
 theme_minimal()

}
